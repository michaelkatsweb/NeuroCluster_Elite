#!/usr/bin/env python3
"""
File: quick_setup.py
Path: NeuroCluster-Elite/quick_setup.py
Description: Quick setup script for NeuroCluster Elite

This script creates all necessary directories and basic configuration files
to get NeuroCluster Elite running immediately.

Usage:
    python quick_setup.py

Author: NeuroCluster Elite Team
Created: 2025-06-30
Version: 1.0.0
License: MIT
"""

import os
import sys
from pathlib import Path
from datetime import datetime

def create_directories():
    """Create all necessary directories"""
    print("📁 Creating directories...")
    
    directories = [
        "logs",
        "data",
        "data/cache", 
        "data/exports",
        "config",
        "backups",
        "migrations"
    ]
    
    for directory in directories:
        dir_path = Path(directory)
        dir_path.mkdir(parents=True, exist_ok=True)
        print(f"  ✅ {directory}")

def create_basic_env():
    """Create basic .env file if it doesn't exist"""
    env_file = Path(".env")
    
    if not env_file.exists():
        print("⚙️ Creating .env configuration file...")
        
        env_content = f"""# NeuroCluster Elite Configuration
# Created: {datetime.now().isoformat()}

# Basic Settings
PAPER_TRADING=true
INITIAL_CAPITAL=100000
DEFAULT_STOCKS=AAPL,GOOGL,MSFT

# Risk Management
RISK_LEVEL=moderate
MAX_POSITION_SIZE=0.10
DAILY_LOSS_LIMIT=0.03

# Logging
LOG_LEVEL=INFO

# Features
ENABLE_VOICE_COMMANDS=false
ENABLE_NOTIFICATIONS=true

# Add your API keys here (optional):
# ALPHA_VANTAGE_API_KEY=your_key_here
# POLYGON_API_KEY=your_key_here
# BINANCE_API_KEY=your_key_here
# BINANCE_SECRET=your_secret_here

# Notification settings (optional):
# DISCORD_WEBHOOK_URL=your_webhook_here
# TELEGRAM_BOT_TOKEN=your_token_here
# EMAIL_SMTP_SERVER=smtp.gmail.com
# EMAIL_USERNAME=your_email@gmail.com
# EMAIL_PASSWORD=your_app_password
"""
        
        with open(env_file, 'w') as f:
            f.write(env_content)
        
        print("  ✅ .env file created")
    else:
        print("  ℹ️ .env file already exists")

def create_readme_files():
    """Create README files for key directories"""
    print("📝 Creating README files...")
    
    readme_content = {
        "logs/README.md": """# Logs Directory

This directory contains all log files generated by NeuroCluster Elite.

## Log Files:
- `neurocluster_console.log` - Console application logs
- `neurocluster_server.log` - Server application logs
- `trading.log` - Trading activity logs
- `performance.log` - Performance metrics
- `audit.log` - Audit trail

Log files are automatically rotated when they reach 50MB.
""",
        "data/README.md": """# Data Directory

This directory contains all data files for NeuroCluster Elite.

## Subdirectories:
- `cache/` - Cached market data
- `exports/` - Exported reports and data
- `database.db` - Main SQLite database (auto-created)

## Auto-Generated:
All files in this directory are automatically created by the application.
""",
        "backups/README.md": """# Backups Directory

This directory contains database and configuration backups.

Backups are created automatically:
- Before major migrations
- Daily at 2:00 AM (if scheduled)
- Manually via backup utility

Use `python scripts/backup.py` to manage backups.
"""
    }
    
    for file_path, content in readme_content.items():
        readme_file = Path(file_path)
        readme_file.parent.mkdir(parents=True, exist_ok=True)
        
        if not readme_file.exists():
            with open(readme_file, 'w') as f:
                f.write(content)
            print(f"  ✅ {file_path}")
        else:
            print(f"  ℹ️ {file_path} already exists")

def check_python_version():
    """Check Python version"""
    print("🐍 Checking Python version...")
    
    version = sys.version_info
    if version.major == 3 and version.minor >= 8:
        print(f"  ✅ Python {version.major}.{version.minor}.{version.micro}")
        return True
    else:
        print(f"  ❌ Python {version.major}.{version.minor}.{version.micro} (requires 3.8+)")
        return False

def check_requirements():
    """Check if requirements are installed"""
    print("📦 Checking requirements...")
    
    required_packages = [
        'streamlit', 'pandas', 'numpy', 'plotly', 'yfinance'
    ]
    
    missing = []
    for package in required_packages:
        try:
            __import__(package)
            print(f"  ✅ {package}")
        except ImportError:
            print(f"  ❌ {package} (missing)")
            missing.append(package)
    
    if missing:
        print(f"\n⚠️ Missing packages: {', '.join(missing)}")
        print("Run: pip install -r requirements.txt")
        return False
    
    return True

def main():
    """Main setup function"""
    print("🚀 NeuroCluster Elite Quick Setup")
    print("=" * 50)
    
    # Check Python version
    if not check_python_version():
        print("❌ Please upgrade to Python 3.8 or higher")
        sys.exit(1)
    
    # Create directories
    create_directories()
    
    # Create basic configuration
    create_basic_env()
    
    # Create README files
    create_readme_files()
    
    # Check requirements
    requirements_ok = check_requirements()
    
    print("\n" + "=" * 50)
    print("✅ Quick setup completed!")
    print("\n🚀 Next steps:")
    
    if not requirements_ok:
        print("1. Install requirements: pip install -r requirements.txt")
        print("2. Run console: python main_console.py")
    else:
        print("1. Run console: python main_console.py")
        print("2. Launch dashboard: streamlit run main_dashboard.py")
        print("3. View API docs: python main_server.py (then visit http://localhost:8000/docs)")
    
    print("\n📖 For more information:")
    print("- README.md - Complete documentation")
    print("- docs/API_REFERENCE.md - API reference")
    print("- docs/VOICE_COMMANDS.md - Voice commands")
    
    print("\n🎉 Happy trading!")

if __name__ == "__main__":
    main()