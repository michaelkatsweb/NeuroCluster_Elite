# File: supervisord.conf
# Path: NeuroCluster-Elite/docker/supervisord.conf
# Description: Supervisor configuration for NeuroCluster Elite process management
#
# This configuration manages all NeuroCluster Elite services in production,
# providing process monitoring, automatic restarts, log management, and
# graceful shutdown handling for optimal reliability and performance.
#
# Features:
# - Multi-process management with dependency handling
# - Automatic service restart on failure
# - Centralized logging and log rotation
# - Resource monitoring and limits
# - Graceful shutdown coordination
# - Health checks and alerts
# - Performance optimization
#
# Services Managed:
# - NeuroCluster Elite Dashboard (Streamlit)
# - NeuroCluster Elite API Server (FastAPI)
# - Background data processing tasks
# - System monitoring and health checks
# - Log rotation and cleanup
#
# Usage:
#   supervisord -c docker/supervisord.conf
#   supervisorctl -c docker/supervisord.conf status
#   supervisorctl -c docker/supervisord.conf restart neurocluster-api
#
# Author: Your Name
# Created: 2025-06-30
# Version: 1.0.0
# License: MIT

[unix_http_server]
file=/tmp/supervisor.sock
chmod=0700
username=neurocluster
password=neurocluster_supervisor_2025

[inet_http_server]
port=127.0.0.1:9001
username=neurocluster
password=neurocluster_supervisor_2025

[supervisord]
logfile=/app/logs/supervisord.log
logfile_maxbytes=50MB
logfile_backups=10
loglevel=info
pidfile=/tmp/supervisord.pid
nodaemon=true
minfds=1024
minprocs=200
umask=022
user=neurocluster
identifier=neurocluster-elite
directory=/app
strip_ansi=false
environment=PYTHONPATH="/app",ENVIRONMENT="production"

[rpcinterface:supervisor]
supervisor.rpcinterface_factory = supervisor.rpcinterface:make_main_rpcinterface

[supervisorctl]
serverurl=unix:///tmp/supervisor.sock
username=neurocluster
password=neurocluster_supervisor_2025

# ==================== NEUROCLUSTER ELITE SERVICES ====================

[program:neurocluster-api]
command=python main_server.py --host 0.0.0.0 --port 8000 --workers 1
directory=/app
user=neurocluster
autostart=true
autorestart=true
startretries=3
startsecs=10
stopwaitsecs=30
stopsignal=TERM
killasgroup=true
stopasgroup=true
redirect_stderr=true
stdout_logfile=/app/logs/neurocluster-api.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5
stderr_logfile=/app/logs/neurocluster-api-error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=5
environment=PYTHONPATH="/app",LOG_LEVEL="INFO",ENVIRONMENT="production"
priority=900

[program:neurocluster-dashboard]
command=streamlit run main_dashboard.py --server.address 0.0.0.0 --server.port 8501 --server.headless true --server.enableCORS false
directory=/app
user=neurocluster
autostart=true
autorestart=true
startretries=3
startsecs=15
stopwaitsecs=30
stopsignal=TERM
killasgroup=true
stopasgroup=true
redirect_stderr=true
stdout_logfile=/app/logs/neurocluster-dashboard.log
stdout_logfile_maxbytes=50MB
stdout_logfile_backups=5
stderr_logfile=/app/logs/neurocluster-dashboard-error.log
stderr_logfile_maxbytes=50MB
stderr_logfile_backups=5
environment=PYTHONPATH="/app",LOG_LEVEL="INFO",ENVIRONMENT="production"
priority=901

[program:neurocluster-worker]
command=python -m src.utils.background_worker
directory=/app
user=neurocluster
autostart=true
autorestart=true
startretries=3
startsecs=5
stopwaitsecs=20
stopsignal=TERM
killasgroup=true
stopasgroup=true
redirect_stderr=true
stdout_logfile=/app/logs/neurocluster-worker.log
stdout_logfile_maxbytes=25MB
stdout_logfile_backups=3
stderr_logfile=/app/logs/neurocluster-worker-error.log
stderr_logfile_maxbytes=25MB
stderr_logfile_backups=3
environment=PYTHONPATH="/app",LOG_LEVEL="INFO",ENVIRONMENT="production"
priority=902

[program:neurocluster-monitor]
command=python scripts/system_monitor.py --daemon
directory=/app
user=neurocluster
autostart=true
autorestart=true
startretries=3
startsecs=5
stopwaitsecs=15
stopsignal=TERM
killasgroup=true
stopasgroup=true
redirect_stderr=true
stdout_logfile=/app/logs/neurocluster-monitor.log
stdout_logfile_maxbytes=25MB
stdout_logfile_backups=3
environment=PYTHONPATH="/app",LOG_LEVEL="INFO",ENVIRONMENT="production"
priority=903

# ==================== OPTIONAL SERVICES ====================

[program:redis-server]
command=redis-server --port 6379 --bind 127.0.0.1 --save 900 1 --save 300 10 --save 60 10000
directory=/app
user=neurocluster
autostart=false
autorestart=true
startretries=3
startsecs=3
stopwaitsecs=10
stopsignal=QUIT
redirect_stderr=true
stdout_logfile=/app/logs/redis.log
stdout_logfile_maxbytes=25MB
stdout_logfile_backups=3
priority=800

[program:log-rotator]
command=python scripts/log_rotator.py --daemon
directory=/app
user=neurocluster
autostart=true
autorestart=true
startretries=3
startsecs=5
stopwaitsecs=10
stopsignal=TERM
redirect_stderr=true
stdout_logfile=/app/logs/log-rotator.log
stdout_logfile_maxbytes=10MB
stdout_logfile_backups=2
environment=PYTHONPATH="/app"
priority=999

# ==================== DEVELOPMENT SERVICES ====================

[program:jupyter-lab]
command=jupyter lab --ip=0.0.0.0 --port=8888 --no-browser --allow-root --NotebookApp.token=neurocluster123
directory=/app
user=neurocluster
autostart=false
autorestart=false
startretries=1
startsecs=10
stopwaitsecs=10
stopsignal=TERM
redirect_stderr=true
stdout_logfile=/app/logs/jupyter.log
stdout_logfile_maxbytes=25MB
stdout_logfile_backups=2
environment=PYTHONPATH="/app",JUPYTER_ENABLE_LAB="yes"
priority=950

# ==================== GROUP DEFINITIONS ====================

[group:neurocluster-core]
programs=neurocluster-api,neurocluster-dashboard
priority=900

[group:neurocluster-background]
programs=neurocluster-worker,neurocluster-monitor
priority=902

[group:neurocluster-optional]
programs=redis-server,log-rotator
priority=800

[group:neurocluster-development]
programs=jupyter-lab
priority=950

[group:neurocluster-all]
programs=neurocluster-api,neurocluster-dashboard,neurocluster-worker,neurocluster-monitor,redis-server,log-rotator
priority=900

# ==================== EVENT LISTENERS ====================

[eventlistener:crashmail]
command=python scripts/crash_notifier.py
events=PROCESS_STATE_FATAL
directory=/app
user=neurocluster
autostart=true
autorestart=unexpected
environment=PYTHONPATH="/app"

[eventlistener:memmon]
command=python scripts/memory_monitor.py
events=TICK_60
directory=/app
user=neurocluster
autostart=true
autorestart=unexpected
environment=PYTHONPATH="/app"

# ==================== LOGGING CONFIGURATION ====================

# Individual program log configurations are defined above in each program section
# Global logging is handled by supervisord itself

# Log file locations:
# - /app/logs/supervisord.log - Main supervisor log
# - /app/logs/neurocluster-api.log - API server logs
# - /app/logs/neurocluster-dashboard.log - Dashboard logs
# - /app/logs/neurocluster-worker.log - Background worker logs
# - /app/logs/neurocluster-monitor.log - System monitor logs

# Log rotation settings:
# - Maximum file size: 50MB for main services, 25MB for background services
# - Backup files: 5 for main services, 3 for background services
# - Automatic rotation when size limits are reached

# ==================== PROCESS MANAGEMENT COMMANDS ====================

# Start all services:
#   supervisorctl -c docker/supervisord.conf start neurocluster-all:*

# Stop all services:
#   supervisorctl -c docker/supervisord.conf stop neurocluster-all:*

# Restart specific service:
#   supervisorctl -c docker/supervisord.conf restart neurocluster-api

# Check status:
#   supervisorctl -c docker/supervisord.conf status

# Start only core services:
#   supervisorctl -c docker/supervisord.conf start neurocluster-core:*

# View logs:
#   supervisorctl -c docker/supervisord.conf tail -f neurocluster-api

# Reload configuration:
#   supervisorctl -c docker/supervisord.conf reread
#   supervisorctl -c docker/supervisord.conf update

# Start development environment:
#   supervisorctl -c docker/supervisord.conf start neurocluster-core:*
#   supervisorctl -c docker/supervisord.conf start jupyter-lab

# Emergency stop all:
#   supervisorctl -c docker/supervisord.conf shutdown

# ==================== HEALTH CHECK CONFIGURATION ====================

# Health checks are implemented through the neurocluster-monitor program
# which periodically checks:
# - API server responsiveness (HTTP health endpoints)
# - Dashboard accessibility
# - Database connectivity
# - Memory and CPU usage
# - Disk space availability
# - Process resource consumption

# Alert thresholds (configured in system_monitor.py):
# - CPU usage > 80% for 5 minutes
# - Memory usage > 90% for 2 minutes
# - Disk usage > 95%
# - API response time > 1 second
# - Failed health checks > 3 consecutive

# ==================== SECURITY CONSIDERATIONS ====================

# 1. User isolation: All processes run as 'neurocluster' user (non-root)
# 2. File permissions: Supervisor socket restricted to user only
# 3. Network binding: Services bind to specific interfaces only
# 4. Log access: Log files have restricted permissions
# 5. Password protection: Supervisor web interface password protected

# ==================== PERFORMANCE TUNING ====================

# Process priorities:
# - 800: Optional services (Redis, log rotation)
# - 900: Core services (API, Dashboard)
# - 902: Background services (Worker, Monitor)
# - 950: Development services (Jupyter)
# - 999: Maintenance services (Log rotator)

# Resource limits:
# - File descriptors: minimum 1024
# - Processes: minimum 200
# - Log file sizes: 50MB main, 25MB background
# - Restart policies: Automatic with backoff

# ==================== MONITORING AND ALERTING ====================

# Supervisor provides built-in monitoring via:
# - Process state tracking
# - Automatic restart on failure
# - Resource usage monitoring
# - Log file management
# - Event notifications

# External monitoring integration:
# - Prometheus metrics exported by neurocluster-monitor
# - Health check endpoints for load balancer integration
# - Log aggregation for centralized monitoring
# - Alert notifications via email/Slack/Discord

# ==================== DEPLOYMENT NOTES ====================

# Production deployment:
# 1. Copy this file to production server
# 2. Ensure all log directories exist with proper permissions
# 3. Start supervisor daemon: supervisord -c docker/supervisord.conf
# 4. Monitor startup: supervisorctl -c docker/supervisord.conf status
# 5. Verify all services are running and healthy

# Development deployment:
# 1. Start only core services initially
# 2. Enable development services as needed
# 3. Use supervisor web interface for easy management
# 4. Check logs regularly during development

# Maintenance:
# 1. Regular log rotation (automated via log-rotator program)
# 2. Monitor resource usage trends
# 3. Update configurations as needed
# 4. Test restart procedures regularly
# 5. Backup configuration files

# Troubleshooting:
# 1. Check supervisord.log for supervisor-level issues
# 2. Check individual service logs for application issues
# 3. Use supervisorctl status to check process states
# 4. Verify environment variables and paths
# 5. Check system resources (CPU, memory, disk)